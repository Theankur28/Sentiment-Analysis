# -*- coding: utf-8 -*-
"""MinorPro.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ndztJJ400keku1WhAwqwhxn1lAWfx0qh

Dataset Information
The objective of this task is to detect hate speech in tweets. For the sake of simplicity, we say a tweet contains hate speech if it has a racist or sexist sentiment associated with it. So, the task is to classify racist or sexist tweets from other tweets.

Formally, given a training sample of tweets and labels, where label '1' denotes the tweet is racist/sexist and label '0' denotes the tweet is not racist/sexist, your objective is to predict the labels on the test dataset.

For training the models, we provide a labelled dataset of 31,962 tweets. The dataset is provided in the form of a csv file with each line storing a tweet id, its label and the tweet.

**Import Modules**
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd  #for storing data
import numpy as np  # used for numerical computing
import matplotlib.pyplot as plt
import seaborn as sns # provides high level interface for statistical graphs
import re # regular expression, used for string operations
import string
import nltk # natural language toolkit
import warnings
# %matplotlib inline

warnings.filterwarnings('ignore') # temporary suppress warnings

"""# New Section

**Loading Dataset**
"""

df = pd.read_csv('Twitter Sentiments.csv')
df.head()

# datatype info
df.info()

"""**Preprocessing the dataset**"""

# remove pattern in the input text
def remove_pattern(input_txt, pattern):
    r = re.findall(pattern, input_txt)
    for word in r:
        input_txt = re.sub(word,"", input_txt)
    return input_txt

df.head()

#first Preprocessing
# remove twitter handles (@user)
df['clean_tweet'] = np.vectorize(remove_pattern)(df['tweet'], "@[\w]*")

df.head()

# 2nd Preprocessing
# remove special characters, numbers
# df['clean_tweet'] = df['clean_tweet'].str.replace(":", " ")
# df['clean_tweet'] = df['clean_tweet'].str.replace("'", " ")
df['clean_tweet'] = df['clean_tweet'].str.replace("[^a-zA-Z#]", " ")

df.head()

# 3rd Preprocessing
# remove short words
df['clean_tweet'] = df['clean_tweet'].apply(lambda x: " ".join([w for w in x.split() if len(w)>3]))
df.head()

# individual words considered as tokens
tokenized_tweet = df['clean_tweet'].apply(lambda x:x.split())
tokenized_tweet.head()

# stem the words
from nltk.stem.porter import PorterStemmer
stemmer = PorterStemmer()

tokenized_tweet = tokenized_tweet.apply(lambda sentence: [stemmer.stem(word) for word in sentence])
tokenized_tweet.head()

# combine words into single sentence
for i in range(len(tokenized_tweet)):
    tokenized_tweet[i] = " " .join(tokenized_tweet[i])
df['clean_tweet'] = tokenized_tweet
df.head()

"""**Exploratory data analysis**"""

# visualize the frequent words
all_words = " ".join([sentence for sentence in df['clean_tweet']])

from wordcloud import WordCloud
wordcloud = WordCloud(width=800, height=500, random_state=42, max_font_size=100).generate(all_words)

# plot the graph
plt.figure(figsize=(15, 8))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.show()

# frequent words visualization for +ve
all_words = " ".join([sentence for sentence in df['clean_tweet'][df['label']==0]])

wordcloud = WordCloud(width=800, height=500, random_state=42, max_font_size=100).generate(all_words)

# plot the graph
plt.figure(figsize=(15, 8))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.show()

# frequent words visualization for -ve
all_words = " ".join([sentence for sentence in df['clean_tweet'][df['label']==1]])

wordcloud = WordCloud(width=800, height=500, random_state=42, max_font_size=100).generate(all_words)

# plot the graph
plt.figure(figsize=(15, 8))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.show()

# extract the hashtag
def hashtag_extract(tweets):
  hashtags = []
  # Loop words in the tweet
  for tweet in tweets:
    ht = re.findall(r"#(\w+)", tweet)
    hashtags.append(ht)
  return hashtags

# extract hashtags from non racist/sexist tweets
ht_positive =  hashtag_extract(df['clean_tweet'][df['label']==0])

# extract hashtags from racist/sexist tweets
ht_negative =  hashtag_extract(df['clean_tweet'][df['label']==1])

ht_positive[:5]

# combine in single list
ht_positive = sum(ht_positive, [])
ht_negative = sum(ht_negative, [])

ht_positive[:5]

# convert dict into dataframe for positive
freq = nltk.FreqDist(ht_positive)
d = pd.DataFrame({'Hashtag': list(freq.keys()),
                  'Count': list(freq.values())})
d.head()

# select top 10 hashtags
d = d.nlargest(columns='Count', n=10)
plt.figure(figsize=(15,9))
sns.barplot(data=d, x='Hashtag', y='Count')
plt.show()

# convert dict into dataframe for negative
freq = nltk.FreqDist(ht_negative)
d = pd.DataFrame({'Hashtag': list(freq.keys()),
                  'Count': list(freq.values())})
d.head()

d = d.nlargest(columns='Count', n=10)
plt.figure(figsize=(15,9))
sns.barplot(data=d, x='Hashtag', y='Count')
plt.show()

"""**Input Split**"""

# feature extraction
# collection of text documents to a matrix of token counts
from sklearn.feature_extraction.text import CountVectorizer
bow_vectorizer = CountVectorizer(max_df=0.90, min_df=2, max_features=1000, stop_words='english')
bow = bow_vectorizer.fit_transform(df['clean_tweet'])

bow[0].toarray()

# split the input for training and testing
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(bow, df['label'], random_state=42, test_size=0.25)

"""**Model Training**"""

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import f1_score, accuracy_score

# training
model = LogisticRegression()
model.fit(x_train, y_train)

# testing
pred = model.predict(x_test)
f1_score(y_test, pred)

accuracy_score(y_test,pred)